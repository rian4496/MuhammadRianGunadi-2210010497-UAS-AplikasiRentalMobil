
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import model.Mobil;
import model.Pelanggan;
import model.Transaksi;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author HADI PC
 */
public class HalamanTransaksi extends javax.swing.JPanel {

    /**
     * Creates new form HalamanMobil
     */
    public HalamanTransaksi() {
        initComponents();
        loadComboBoxData();
        clearInputFields();
        loadTransaksiList();  // Load Transaksi list

        dpSewa.addDateChangeListener((dce) -> calculateTotalBiaya());
        dpSewa.getSettings().setVetoPolicy((ld)
                -> dpKembali.getDate() == null || ld.isBefore(dpKembali.getDate())
        );
        dpKembali.addDateChangeListener((dce) -> calculateTotalBiaya());
        dpKembali.getSettings().setVetoPolicy((ld)
                -> dpSewa.getDate() == null || ld.isAfter(dpSewa.getDate())
        );

        listTransaksi.addListSelectionListener(evt -> {
            if (!evt.getValueIsAdjusting()) {
                Transaksi selectedTransaksi = listTransaksi.getSelectedValue();
                if (selectedTransaksi != null) {
                    try {
                        // Display transaction details
                        cmbMobil.setSelectedItem(selectedTransaksi.mobil());
                        cmbPelanggan.setSelectedItem(selectedTransaksi.pelanggan());
                        dpSewa.setDate(selectedTransaksi.tanggalSewa());
                        dpKembali.setDate(selectedTransaksi.tanggalKembali());
                        spnTotalBiaya.setValue(selectedTransaksi.totalBiaya());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Gagal memuat data transaksi: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbMobil = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbPelanggan = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        dpSewa = new com.github.lgooddatepicker.components.DatePicker();
        jLabel5 = new javax.swing.JLabel();
        dpKembali = new com.github.lgooddatepicker.components.DatePicker();
        jLabel6 = new javax.swing.JLabel();
        spnTotalBiaya = new javax.swing.JSpinner();
        jPanel6 = new javax.swing.JPanel();
        btnSimpan = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        txtCari = new javax.swing.JTextField();
        btnCari = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTransaksi = new javax.swing.JList<>();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/transaction.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(210, 210));
        jPanel2.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.WEST);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(24, 24, 24, 24));
        jPanel4.setLayout(new java.awt.GridLayout(3, 4, 12, 8));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Mobil");
        jPanel4.add(jLabel2);

        cmbMobil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMobilActionPerformed(evt);
            }
        });
        jPanel4.add(cmbMobil);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Pelanggan");
        jPanel4.add(jLabel3);

        jPanel4.add(cmbPelanggan);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Tanggal Sewa");
        jPanel4.add(jLabel4);
        jPanel4.add(dpSewa);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Tanggal Kembali");
        jPanel4.add(jLabel5);
        jPanel4.add(dpKembali);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Total Biaya");
        jPanel4.add(jLabel6);

        spnTotalBiaya.setEnabled(false);
        jPanel4.add(spnTotalBiaya);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 12, 8));

        btnSimpan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSimpan.setText("Simpan");
        btnSimpan.setPreferredSize(new java.awt.Dimension(150, 50));
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        jPanel6.add(btnSimpan);

        btnUbah.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnUbah.setText("Ubah");
        btnUbah.setPreferredSize(new java.awt.Dimension(150, 50));
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });
        jPanel6.add(btnUbah);

        btnHapus.setText("Hapus");
        btnHapus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnHapus.setPreferredSize(new java.awt.Dimension(150, 50));
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        jPanel6.add(btnHapus);

        btnReset.setText("Reset");
        btnReset.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnReset.setPreferredSize(new java.awt.Dimension(150, 50));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        jPanel6.add(btnReset);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        txtCari.setPreferredSize(new java.awt.Dimension(360, 30));
        jPanel7.add(txtCari);

        btnCari.setText("Cari");
        btnCari.setPreferredSize(new java.awt.Dimension(100, 30));
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });
        jPanel7.add(btnCari);

        jPanel1.add(jPanel7, java.awt.BorderLayout.SOUTH);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));

        listTransaksi.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listTransaksi);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel5, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        Transaksi transaksi = getTransaksiFromInput();
        if (transaksi == null) {
            return;
        }

        try {
            transaksi.save();
            loadTransaksiList();
            clearInputFields();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan transaksi: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        Transaksi selectedTransaksi = listTransaksi.getSelectedValue();
        if (selectedTransaksi == null) {
            JOptionPane.showMessageDialog(this, "Pilih transaksi yang ingin diubah!", "Validasi Gagal", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Transaksi updatedTransaksi = getTransaksiFromInput(selectedTransaksi.idTransaksi());
        if (updatedTransaksi == null) {
            return;
        }

        try {
            updatedTransaksi.update();
            loadTransaksiList();
            clearInputFields();
            JOptionPane.showMessageDialog(this, "Data transaksi berhasil diperbarui!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal memperbarui transaksi: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        Transaksi selectedTransaksi = listTransaksi.getSelectedValue();
        if (selectedTransaksi == null) {
            JOptionPane.showMessageDialog(this, "Pilih transaksi yang ingin dihapus!", "Validasi Gagal", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Apakah Anda yakin ingin menghapus transaksi yang dipilih?",
                "Konfirmasi Hapus",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            selectedTransaksi.delete();
            loadTransaksiList();
            clearInputFields();
            JOptionPane.showMessageDialog(this, "Transaksi berhasil dihapus!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus transaksi: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        loadTransaksiList(txtCari.getText());
    }//GEN-LAST:event_btnCariActionPerformed

    private void cmbMobilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMobilActionPerformed
        calculateTotalBiaya();
    }//GEN-LAST:event_cmbMobilActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clearInputFields();
        txtCari.setText("");
        loadTransaksiList();
    }//GEN-LAST:event_btnResetActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loadComboBoxData();
        clearInputFields();
        txtCari.setText("");
        loadTransaksiList();
    }//GEN-LAST:event_formComponentShown

    private void loadComboBoxData() {
        try {
            // Load Mobil data
            cmbMobil.removeAllItems();
            List<Mobil> mobilList = Mobil.getAll();  // Assuming Mobil.getAll() returns a List<Mobil>
            for (Mobil mobil : mobilList) {
                cmbMobil.addItem(mobil);
            }

            // Load Pelanggan data
            cmbPelanggan.removeAllItems();
            List<Pelanggan> pelangganList = Pelanggan.getAll();  // Assuming Pelanggan.getAll() returns a List<Pelanggan>
            for (Pelanggan pelanggan : pelangganList) {
                cmbPelanggan.addItem(pelanggan);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data untuk combobox: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadTransaksiList() {
        loadTransaksiList(null);
    }

    private void loadTransaksiList(String keyword) {
        try {
            List<Transaksi> transaksiList = Transaksi.getAll(keyword);

            DefaultListModel<Transaksi> listModel = new DefaultListModel<>();
            for (Transaksi transaksi : transaksiList) {
                listModel.addElement(transaksi);
            }

            listTransaksi.setModel(listModel);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data transaksi: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private Transaksi getTransaksiFromInput() {
        return getTransaksiFromInput(null);
    }

    private Transaksi getTransaksiFromInput(Integer id) {
        Mobil mobil = (Mobil) cmbMobil.getSelectedItem();
        if (mobil == null) {
            JOptionPane.showMessageDialog(this, "Mobil tidak boleh kosong!", "Validasi Gagal", JOptionPane.WARNING_MESSAGE);
            return null;
        }

        Pelanggan pelanggan = (Pelanggan) cmbPelanggan.getSelectedItem();
        if (pelanggan == null) {
            JOptionPane.showMessageDialog(this, "Pelanggan tidak boleh kosong!", "Validasi Gagal", JOptionPane.WARNING_MESSAGE);
            return null;
        }

        // Check other fields like dates and total biaya...
        var tanggalSewa = dpSewa.getDate();
        var tanggalKembali = dpKembali.getDate();
        var totalBiaya = (Double) spnTotalBiaya.getValue();

        if (tanggalSewa == null || tanggalKembali == null || totalBiaya == null) {
            JOptionPane.showMessageDialog(this, "Data tanggal dan total biaya tidak boleh kosong!", "Validasi Gagal", JOptionPane.WARNING_MESSAGE);
            return null;
        }

        // Create Transaksi object
        if (id != null) {
            return new Transaksi(id, mobil.idMobil(), pelanggan.idPelanggan(), tanggalSewa, tanggalKembali, totalBiaya);
        } else {
            return new Transaksi(mobil.idMobil(), pelanggan.idPelanggan(), tanggalSewa, tanggalKembali, totalBiaya);
        }
    }

    private void calculateTotalBiaya() {
        Mobil mobil = (Mobil) cmbMobil.getSelectedItem();
        LocalDate tanggalSewa = dpSewa.getDate();
        LocalDate tanggalKembali = dpKembali.getDate();

        if (mobil == null || tanggalSewa == null || tanggalKembali == null) {
            spnTotalBiaya.setValue(0);
        } else {
            spnTotalBiaya.setValue(mobil.hargaSewaPerHari() * tanggalSewa.until(tanggalKembali).getDays());
        }
    }

    private void clearInputFields() {
        cmbMobil.setSelectedIndex(-1); // Reset pilihan Mobil
        cmbPelanggan.setSelectedIndex(-1); // Reset pilihan Pelanggan
        dpSewa.clear();// Reset tanggal sewa
        dpKembali.clear(); // Reset tanggal kembali
        spnTotalBiaya.setValue(0); // Reset total biaya
        listTransaksi.clearSelection(); // Hapus pilihan pada daftar transaksi
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnUbah;
    private javax.swing.JComboBox<model.Mobil> cmbMobil;
    private javax.swing.JComboBox<model.Pelanggan> cmbPelanggan;
    private com.github.lgooddatepicker.components.DatePicker dpKembali;
    private com.github.lgooddatepicker.components.DatePicker dpSewa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<model.Transaksi> listTransaksi;
    private javax.swing.JSpinner spnTotalBiaya;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables
}
